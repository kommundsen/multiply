{"version":3,"sources":["Equation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Equation","props","a","b","className","initialState","linear","speed","reducer","state","action","type","Math","round","random","value","App","useReducer","dispatch","useEffect","timeout","setTimeout","clearTimeout","name","checked","onChange","e","target","htmlFor","min","max","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAqBeA,EAdE,SAACC,GAAkB,IACxBC,EAASD,EAATC,EAAGC,EAAMF,EAANE,EAEX,OACI,sBAAKC,UAAU,WAAf,UACI,sBAAMA,UAAU,UAAhB,SAA2BF,IAC3B,sBAAME,UAAU,WAAhB,kBACA,sBAAMA,UAAU,UAAhB,SAA2BD,IAC3B,sBAAMC,UAAU,WAAhB,eACA,sBAAMA,UAAU,SAAhB,SAA0BF,EAAIC,QCEpCE,EAAsB,CAC1BH,EAAG,EACHC,EAAG,EACHG,QAAQ,EACRC,MAAO,KAGHC,EAAU,SAACC,EAAcC,GAC7B,OAAOA,EAAOC,MACZ,IAAK,OACH,OAAIF,EAAMH,OACD,2BACFG,GADL,IAEEP,EAAe,KAAZO,EAAMP,EAAW,EAAIO,EAAMP,EAAI,EAClCC,EAAe,KAAZM,EAAMN,EAAW,EAAgB,KAAZM,EAAMP,EAAWO,EAAMN,EAAI,EAAIM,EAAMN,IAGxD,2BACFM,GADL,IAEEP,EAAGU,KAAKC,MAAsB,GAAhBD,KAAKE,UACnBX,EAAGS,KAAKC,MAAsB,GAAhBD,KAAKE,YAIzB,IAAK,SACH,OAAO,2BACFL,GADL,IAEEH,OAAQI,EAAOK,QAEnB,IAAK,QACH,OAAO,2BACFN,GADL,IAEEF,MAAOG,EAAOK,QAElB,QACE,OAAON,IA2CEO,EAvCH,WAAO,IAAD,EAEUC,qBAAWT,EAASH,GAF9B,mBAETI,EAFS,KAEFS,EAFE,KAIhBC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAS,CAAEP,KAAM,WAChBF,EAAMF,OACT,OAAO,kBAAMe,aAAaF,MACzB,CAACX,IAUJ,OACE,sBAAKL,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,0CACA,gCACE,uBAAOmB,KAAK,SAASZ,KAAK,WAAWa,QAASf,EAAMH,OAAQmB,SAbzC,SAACC,GAC1BR,EAAS,CAAEP,KAAM,SAAUI,MAAOW,EAAEC,OAAOH,aAarC,uBAAOI,QAAQ,SAAf,uBAEF,gCACE,uBAAOL,KAAK,QAAQZ,KAAK,QAAQkB,IAAK,EAAGC,IAAK,GAAIf,MAAON,EAAMF,MAAQ,IAAMkB,SAb3D,SAACC,GACzBR,EAAS,CAAEP,KAAM,QAASI,MAAkC,IAA3BgB,SAASL,EAAEC,OAAOZ,YAa7C,uBAAOa,QAAQ,QAAf,4BAGJ,+BACE,cAAC,EAAD,CAAU1B,EAAGO,EAAMP,EAAGC,EAAGM,EAAMN,UC5ExB6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.22ff9b3e.chunk.js","sourcesContent":["import './Equation.css';\r\n\r\ntype Props = {\r\n    a: number;\r\n    b: number;\r\n}\r\n\r\nconst Equation = (props: Props) => {\r\n    const { a, b } = props;\r\n\r\n    return (\r\n        <div className=\"equation\">\r\n            <span className=\"operand\">{a}</span>\r\n            <span className=\"operator\">&times;</span>\r\n            <span className=\"operand\">{b}</span>\r\n            <span className=\"operator\">&#61;</span>\r\n            <span className=\"result\">{a * b}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Equation;","import React, { ChangeEvent, useEffect, useReducer } from 'react';\nimport './App.css';\nimport Equation from './Equation';\n\ntype Action =\n  | { type: 'next'}\n  | { type: 'linear', value: boolean }\n  | { type: 'speed', value: number }\n  ;\n\ntype State = {\n  a: number;\n  b: number;\n\n  linear: boolean;\n  speed: number;\n}\n\nconst initialState: State = {\n  a: 1,\n  b: 1,\n  linear: true,\n  speed: 5000,\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch(action.type) {\n    case 'next': {\n      if (state.linear) {\n        return {\n          ...state,\n          a: state.a === 10 ? 1 : state.a + 1,\n          b: state.b === 10 ? 1 : state.a === 10 ? state.b + 1 : state.b,\n        };\n      } else {\n        return {\n          ...state,\n          a: Math.round(Math.random() * 10),\n          b: Math.round(Math.random() * 10),\n        }\n      }\n    }\n    case 'linear': \n      return {\n        ...state,\n        linear: action.value,\n      };\n    case 'speed':\n      return {\n        ...state,\n        speed: action.value,\n      };\n    default: \n      return state;\n  }\n}\n\nconst App = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      dispatch({ type: 'next'});\n    }, state.speed);\n    return () => clearTimeout(timeout);\n  }, [state])\n\n  const handleLinearChange = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'linear', value: e.target.checked });\n  }\n\n  const handleSpeedChange = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'speed', value: parseInt(e.target.value) * 1000});\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Multiply</h1>\n        <div>\n          <input name=\"linear\" type=\"checkbox\" checked={state.linear} onChange={handleLinearChange} />\n          <label htmlFor=\"linear\">Linear</label>\n        </div>\n        <div>\n          <input name=\"speed\" type=\"range\" min={1} max={60} value={state.speed / 1000} onChange={handleSpeedChange} />\n          <label htmlFor=\"speed\">Duration</label>\n        </div>\n      </header>\n      <main>\n        <Equation a={state.a} b={state.b} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}